<?xml version="1.0" encoding="UTF-8" ?>
<scenario>
<outline>
シナリオデータのルート要素です。
</outline>
<title>
シナリオのタイトルを表します。

プレイ画面の右肩に表示されるので、文字数は10～15文字程度が推奨です。
</title>
<author>
作者名を表します。

投稿時には、ここで指定された名前を掲載します。
</author>

<!--init要素-->
<init>
<outline>
シナリオの初期化情報を表します。
</outline>

<basic>
<outline>
シナリオ全般に関わる基本挙動を表します。
</outline>

<summary>
true（値は固定）を設定することで、パラグラフ番号レスモードを有効にします。

具体的には、以下のように表示が変化します。

+ scene要素のsummary属性をシーン冒頭に表示
+ シーン冒頭に表示されているシーン番号が非表示
</summary>

<imgset>
キャラの表示画像を変更する場合に、本属性を指定します。 設定値は「custom」で固定です。

>> ■Note■
>> 将来的には「@～」のような形式で、システム標準の画像セットを指定できるようにする、かもしれません。

本属性を指定した場合には、シナリオルートの配下に/charaフォルダーを作成し、以下の形式で画像を保存してください。

`性別_年齢_種族.png`（たとえばmale_adult_fighter.png）

画像のルールは以下の通りです。

+ サイズは100x100px
+ constraint要素で除外した**以外の**全画像を用意すること（一部だけは不可）
</imgset>

</basic>

<constraint>
<outline>
シナリオ起動時に生成される種族／性別／年齢を制限したい場合に指定します。

すべてを許容する場合は指定しません。
</outline>

<race>
生成する種族を表します。

以下の値をカンマ区切りで列記してください。

+ FIGHTER
+ WIZARD
+ DWARF
+ ELF
</race>

<sex>
生成する性別を表します。

以下の値のいずれかを指定してください。複数は列記できません（双方許容する場合は指定しません）。

+ MALE
+ FEMALE
</sex>

<age>
生成する年齢を表します。

以下の値をカンマ区切りで列記してください。

+ YOUNG
+ ADULT
+ OLD
</age>
</constraint>

<bgm>
<outline>
シナリオで利用する楽曲を指定します。
</outline>

<main>
メインテーマを表します（既定はmainです）。
</main>

<happy>
ハッピーエンドの曲を表します（既定はhappy）。
</happy>

<bad>
バッドエンドの曲を表します（既定はbad）。
</bad>

<common>

以下は、値を指定する際の基本ルールです。

+ 拡張子「.mp3」を除いたベース名で指定します（例えば、battle01.mp3ではなく、battle01）。
+ 頭に「@」付きでシステム標準のBGMを意味します。
    + 利用できる.mp3ファイルの名前については、STextページよりUtility 01を確認してください（たとえば@field01、@castle01など）。
    + 特別な標準.mp3として無音を表す「@none」も利用できます。
    + 標準BGMについては、シナリオフォルダーに.mp3ファイルを格納する必要はありません。
+ 頭に「@」のないファイル名は、シナリオフォルダー配下の/bgmフォルダーを見に行きます。対応する.mp3ファイルを準備してください。
</common>
</bgm>

<label>
<outline>ステータスダイアログで表示されるラベル文字列を表します。</outline>

<status name="hp／mp／state／str／int／dex／krm">
hp～krmは、対応する項目のラベルに表示すべき文字列を表します。 既定では、それぞれHP、MP、STATE、STR、INT、DEX、KRMです。

表示の都合上、5文字以内を推奨します。また、見た目を考慮するならば、HP～MP、STR～KRMはセットで設定することをお勧めします（一部だけ設定した場合の、見た目の不ぞろいを避けるためです）。
</status>

<free name="free1/free2/free3">
free1～3は、対応する項目のラベルに表示すべき文字列を表します。 既定では、それぞれFREE1、FREE2、FREE3です。

表示の都合上、5文字程度を推奨します。また、一部しか利用していない場合には、見た目を考慮して、未使用の項目には「－」などのダミー値を設定することをお勧めします。

本要素を指定した場合、BattleSheet下部の簡易ステータス表示にもFree1～3が追加されます。
</free>
</label>

<intro>

<outline>
ゲーム画面のメタ情報、Tweetボタンの紹介文などで利用される情報を定義します。
</outline>

<keywords>
ゲーム画面でのメタ情報に埋め込まれるキーワードです。

カンマ区切りで1～3単語程度を目安に指定してください。
</keywords>

<description>
ゲーム画面でのメタ情報、Twitterカード、また、［Tweet］ボタンに反映される紹介文を表します（既定ではSText共通のメッセージが適用されます）。

シーン上で、${tweet}～${/tweet}を指定した場合には上書きされます。
</description>
</intro>
</init>

<!--グループ情報-->
<groups>
<outline></outline>
<group>
<outline>
シーンを束ねるためのグループ定義（シーンの範囲）を表します。グループは、シーンidの範囲で定義するので、関連するシーンは極力、特定のid範囲の中にまとめる（＝なるべく順番に記述する）ことを強くお勧めします。

グループの情報はPlayground Flowでチャートの表示範囲を絞り込むために利用できます。
</outline>

<start>
グループに入れるべきシーンのid値（開始）を表します。
</start>

<end>
グループに入れるべきシーンのid値（終了）を表します。
</end>

<title>
グループの表示名を表します。 識別しやすいよう、10文字前後のわかりやすい名前を付けてください。
</title>
</group>
</groups>

<items>
<outline></outline>
<item>
<outline>
個々のアイテム定義を表します。
</outline>

<id>
アイテムコードです（シナリオ内部で一意でなければなりません）。

接頭辞「i」＋「番号」で表します。
</id>

<name>
アイテムの名前を表します。
</name>

<target>
アイテムの作用するパラメーターを表します。本属性を指定した場合、アイテムは「使用可能である」と見なされ、アイテム＆フラグシートから［USE］ボタンで使用できます。

+ hp
+ mp
+ state
+ str
+ int
+ dex
+ krm
+ free1
+ free2
+ free3
+ param
+ none（なにもしない）

none値では自動計算はせずに、アイテムをそのまま消費します（具体的な指示はシナリオ側で記述すべきです）。
</target>

<effect>
アイテムの効果を表します。target属性に応じた影響値（5、1..5、fullなど）を指定してください。

利用可能な設定値は、scene要素の対応する属性を参照してください（たとえばhpであれば、scene要素のhp属性で指定できる値だけが指定できます）。

target="none"の場合、effect属性の値は不要です（無視されます）。
</effect>

<shared>
アイテムを次のシナリオに引き継ぐかどうかを表します（値はtrue固定）。

※scene要素のnexts属性が指定された場合のみ有効です。
</shared>

<text>
アイテムの説明を表します（15文字程度を推奨）。 アイテム＆フラグ画面での表示などに利用されます。

また、「使用可能なアイテム」では使用時にトースト表示のテキストにもなります（よって、使用時の結果を意識したテキストであるべきです）。
</text>
</item>
</items>

<!--フラグ情報-->
<flags>
<outline></outline>
<flag>
<outline>
個々のフラグ定義を表します。
</outline>

<id>
フラグコードです（シナリオ内部で一意でなければなりません）。

接頭辞「f」＋「番号」で表します。
</id>

<text>
フラグの表示名を表します。

シナリオの分岐スイッチとしてだけでなく、ステータス画面にあらすじとして表示する用途でも利用します。分岐の不要な箇所でも、物語の要所要所で設定しておくことをお勧めします（文字数は15文字程度を推奨）。

テキスト先頭が「*」で始まる場合には、ステータス画面に表示されない隠しフラグとなります。あとでscene要素のflags属性で削除できるのも、隠しフラグだけです。
</text>
</flag>
</flags>

<!--内部パラメーター情報-->
<params>
<outline>
</outline>
<param>
<outline>
個々の固有パラメーターを表します。

固有パラメーターは、任意の個数だけ定義できるFree1～3のようなものです。各種サイドバーには表示されないので、内部的な値の管理に利用できます（ただし、${var?～}で本文に表示したり、分岐の条件式などで利用可能）。

数値での利用をメインに想定していますが、文字列の格納も可能です。
</outline>

<id>
パラメーターコードです（シナリオ内部で一意でなければなりません）。

接頭辞「p」＋「番号」で表します。

ただし、p90～99は予約番号です。現在、予約されているのは以下のものだけですが、将来的にシステムが特定の用途で利用する可能性があるので、シナリオ開発者が自分で採番してはいけません。

+ p99：［戻る］機能の戻り先Scene番号を格納
</id>

<min>
パラメーター値の下限を表します（数値でのみ）。 任意ですが、指定時はmax属性とセットで利用してください。
</min>

<max>
パラメーター値の上限を表します（数値でのみ）。 任意ですが、指定時はmin属性とセットで利用してください。
</max>

<initial>
パラメーター値の初期値を表します（必須）。
</initial>

<text>
パラメーターの説明を表します（15文字程度を推奨）。 ${var?～}式で出力できるので、表示を意識した内容にすべきです。
</text>
</param>
</params>

<!--敵情報-->
<enemies>
<outline></outline>
<enemy>
<outline>
個々の敵／罠定義を表します。
</outline>

<id>
敵コードです（シナリオ内部で一意でなければなりません）。

接頭辞「m」＋「番号」で表します。
</id>

<name>
敵／罠の名前を表します（10文字程度を推奨します）。
</name>

<element>
敵／罠の属性を表します。

以下のいずれかを指定してください（無指定の場合は無属性と見なされます）。

+ earth（地）
+ fire（火）
+ water（水）
+ wind（風）
+ spirit（霊）
</element>

<attack>
攻撃の種類を表し、どのステータスにダメージを反映するかを決定します（free1～3の意味は、シナリオによって異なります）。

以下のいずれかを指定してください。 いずれの値でもない場合は、（アイコン表示ではなく）文字列がそのまま表示されます。

+ physics（物理）
+ magic（魔法）
+ both（物理／魔法双方）
+ free1（FREE1）
+ free2（FREE2）
+ free3（FREE3）
+ poison（毒）
+ frozen（凍結）
+ stone（石化）
+ curse（呪い）
+ forget（忘却）
+ strN（STR低下）
+ intN（INT低下）
+ dexN（DEX低下）
+ krmN（KRM低下）

strN～krmNのNには1～9の値を設定できます。str2の場合、STRを2低下させます。 ただし、str1はstrとしても同じ意味です。

>> ■Note■
>> ただし、ゲームバランスの観点からは（数値抜きで）str、int、dex、krmを利用すべきです。Playground FlowでもxxxN値には対応していません。
</attack>

<func>
ダメージ式を表します。

### （1）attack属性がphysics／magic／bothの場合

ダメージ式は「nL+nR+nLM+nRM+nM+n-nSTR-nINT-nDEX-nKRM-nFREE1-nFREE2-nFREE3」で統一。

+ L、LM、M、RM、Rはダイスの値を表します。利用できる記号は、ダイスの個数によって変化します。
    + 2個：L（左）、R（右）
    + 3個：L（左）、M（中央）、R（右）
    + 4個：L（左）、LM（中央左）、RM（中央右）、R（右）
    + 5個：L（左）、LM（中央左）、M（中央）、RM（中央右）、R（右）
+ その他の制約は以下の通りです。
    + nは任意の数値
    + 符号（プラスマイナス）は差し替え可能
    + すべての項は省略可能＆順番も入れ替え可能
    + カッコは利用できない

### （2）attack属性が状態異常、ステータス攻撃の場合

回避条件を「[exp]&gt;[exp]」の形式で指定する（[exp]はダメージ式と同様の形式）。 回避条件を満たさなかった場合にだけ、指定の状態異常が付与されます。

※「[exp]&lt;[exp]」は不可です！！

以下は、その他の注意点です。

+ （1）（2）いずれの場合も、カンマ区切りで複数指定も可能です（その場合はランダムに式を選択します）。
+ ダメージ式／回避条件のステータスへの反映（自動計算）は、func属性の頭に「*」を付与することで無効化できます（自動化ができないシナリオでは「*」を付与してください）。
</func>

<hp>
敵の生命力を表します。 省略可能で、指定した場合にだけBattleSheetに表示されます。

+ 本属性を指定した場合には、func_opp属性も指定してください。
+ 具体的な数値の他、p01、p02...のような内部パラメーターidを指定することも可能です。その場合、シーンを跨って生命力を保持できます。
    + 生命力の初期値もparam要素のinitial属性で指定します。
</hp>

<func_opp>
プレイヤーから敵を攻撃する際のダメージ式を表します（hp属性が指定されている場合にだけ有効です）。指定可能な式については、func属性の（1）に準じます。
</func_opp>

<drop>
ドロップアイテムを表します。以下は設定例です。

+ 「mon/3」で「月×3」（mon、tue、wed、thu、fri、sat、sunを利用可能）
+ 「free1/50/50Gold」で「50Gold」(「free1/50」は「free1を50加算の意）
+ 「item/i01/武器」で「武器」（アイテムi01を入手）
+ 「flag/f01/扉を開く」で「扉を開く」（フラグf01を設定）
+ 「param/p01:10/瓶の中身」で「瓶の中身」（パラメーターp01を10加算。負数ならば減算）
+ 「param/p01:@10/瓶の中身」で「瓶の中身」（パラメーターp01を10に設定）

任意の属性で、無指定の場合はelement属性からドロップアイテムを確定します（無属性ではドロップは空）。

</drop>

<text>
敵／罠の説明文です。

プレイ画面で敵リストをクリックした時にトースト表示される文言なので、最大でも50文字程度を推奨します。
</text>
</enemy>
</enemies>

<!--実績情報-->
<results>
<outline></outline>
<result>
<outline>
個々の実績情報を表します。
</outline>

<id>
実績コードです（シナリオ内部で一意でなければなりません）。

接頭辞「r」＋「番号」で表します。
</id>

<name>
実績名を表します（ex. ガジガジネズミ）。
</name>

<level>
難易度を表します。指定できるのは1～5の値です。
</level>

<text>
実績の成立条件を表します（ex. 隧道でネズミに食い殺された）
</text>
</result>
</results>

<!--ライセンス情報-->
<licence>
<outline>
</outline>
<work>
<outline>
シナリオ内部で利用している画像／楽曲のライセンス情報を表します。

シナリオ終了時（ハッピー／バッドエンドを問わない）に、ブラウザーのコンソール画面にリスト表示される情報です。
</outline>

<name>
category属性が...

+ bgmの場合は曲名
+ pictureの場合は利用場所（街、酒場など）

を表します。
</name>

<category>
作品の分類を表します。以下のいずれかを指定してください。

+ bgm（楽曲）
+ picture（画像）
</category>

<creator>
作者／サイト名を表します。
</creator>

<url>
作品の公開サイト（URL）を表します。
</url>
</work>
</licence>

<!--シーン情報-->
<scene>
<outline>
各シーンの情報を表します。シナリオ本体です。
</outline>    

<id>
シーン番号を数字で表します。idのルールは以下です。

+ シナリオ内部で一意であること
+ id値は0～99999の範囲で採番すること（連番でなくても構わない）
+ 予約番号を一般のSceneに付与してはいけない。

以下は、現在の予約番号です。

+ 0：スタート地点（プロローグであること）
+ 90000；［戻る］機能のリンク先（現在のシーンのひとつ前に戻る）
+ 99998：共通インポート（全シーンの末尾に無条件に反映。ただし、exclude／end属性ありのシーンを除く）
+ 99999：共通ルール（Battle Sheetに既定で反映される）

将来的にid="9XXXX"はなにかしらの予約idになる可能性があります。準予約番号扱いとし、通常のSceneとしては利用しないようにしてください。
</id>

<summary>
シーンのサマリ情報を表します（10文字以内を推奨）。

既定では、Playground Flowでシーンを識別するための情報で、プレイ画面には表示はされません。ただし、パラグラフレスモードを有効にすることで、本項目の値がページ上部に表示することもできます。
</summary>

<items>
そのシーンに移動した時に入手できるアイテムを表します。

カンマ区切りで複数列挙できます。「-i～」で、指定のアイテムを喪失します。
</items>

<flags>
そのシーンに移動した時に立つフラグを表します。

カンマ区切りで複数列挙できます。「-f～」で、指定のフラグを喪失します（ただし、破棄できるのは隠しフラグだけです）。
</flags>

<params>
そのシーンに移動した時に加算／減算する内部パラメーターを表します。

+ p01:10 … p01を10加算
+ p01:-10 … p01を10減算
+ p01:@10 … p01を10に設定
+ 「p01:10,p02:Rio」のように、カンマ区切りで複数列挙も可能です。
</params>

<enemies>
そのシーンで登場する敵／罠情報を表します。プレイ画面下部に敵リストを生成するのに利用されます。

カンマ区切りで複数列挙できます。
</enemies>

<dice>
そのシーンのBattle Sheetで利用できるダイスを「種類:個数」の形式で表します。 たとえば「10:5」で、d10ダイスを5個表示します（既定は「6:2」）。

+ 種類は数字、または文字列で表します。
    + 数字：ダイスの上限値（1～20）
    + 文字列：high（4、5、6のみ）、cheat_h（6の出やすい）、cheat_l（1が出やすい）
+ 個数は2～5の間で表します。
</dice>

<stars>
そのシーンに移動した時に加算／減算する＜七惑星の欠片＞を表します。指定できる形式は、以下の通りです。

+ 月～太陽の順で「9,9,9,9,9,9,9」のカンマ形式（途中省略は不可）
    + 負数指定も可（ただし、減算の結果が負になった場合はゼロ丸めされます。減算の際はシナリオ側で矛盾が生じないようにしてください）
+ 「divN」ですべての星を1/Nにもできる（小数点以下切り捨て）
</stars>

<hp_mp>
そのシーンに移動した時に加算／減算するhp、mp値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」のような定数
+ 「-10..-1」の範囲指定（範囲内で乱数が生成されます）
+ 「full」で上限値がセットされます
+ 「half」で上限値の半分がセットされます

ただし、自動更新によって上限を超えた場合には上限で丸められます。
</hp_mp>

<state>
そのシーンに移動した時に付与／解除する状態異常を表します。指定できる形式は、以下の通りです。

+ poison（毒）
+ frozen（凍結）
+ stone（石化）
+ curse（呪い）
+ forget（忘却）
+ それぞれに「-」を付与することで解除（例：-poison）
+ 「-all」ですべての状態異常を解除
</state>

<status>
そのシーンに移動した時に加算／減算するstr、int、dex、krm値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」で、指定値だけ増減
+ 「@5」で、指定値を設定
+ 「full」で初期値に戻す（非推奨）
</status>

<free>
そのシーンに移動した時に加算／減算するfree1～3の値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」で、指定値だけ増減
+ 「-10..-1」の範囲指定（範囲内で乱数が生成されます）
+ 「@5」で、指定値を設定
</free>

<result>
そのシーンに移動した時に取得できる実績を表します。複数指定はできません。
</result>

<bgm>
そのシーンに移動した時に、指定されたBGMに切り替えます（詳細はbgm要素も参照してください）。

bgm／end属性が同時に指定された場合は、bgm属性で指定された曲が優先されます。
</bgm>

<se>
そのシーンに移動した時に、指定された効果音を再生します。

「se.mp3」であれば、「se」と指定します。
</se>

<rule>
Battle Sheetに反映すべきルールテキストを指定します（scene要素のid値で指定してください）。

無指定の場合は、id="99999"のシーンが共通テキストとして引用されます。
</rule>

<end>
そのシーンがエンディングシーンであるかを表します。end属性が指定された場合、STextはゲームを終了し、セーブデータを初期化します。

指定できる値は、以下の通りです。

+ happy（ハッピーエンド）
+ bad（バッドエンド）
</end>

<nexts>
現在のシナリオのセーブデータを、指定のシナリオに引き継ぎます。連作（複数シナリオから構成されるシナリオ）のための機能です。

引き継ぎ先のシナリオコードを「scepter,zero,hero」のようなシナリオコード（カンマ区切り）で指定します。引き継ぐ項目については、以下のセーブデータ詳細を参照してください。

※end属性との組み合わせでのみ有効

>> ■Caution■
>> 引き継ぎに際しては、次シナリオのScene 0の属性指定は無視されます。セーブデータの一部に初期値を与える場合には、Scene 1（次のシーン）などで設定するようにしてください。
</nexts>

<exclude>
true（固定値）で、共通インポートを無効化します。 共通インポートについては、scene－id属性を参照してください。
</exclude>

<fixed>
チェック時には、シーンidのシャッフル時に、シャッフルから除外します。
</fixed>

<color>
Playground Flowのチャート図で利用するシーンカラーを表します。
</color>

<text>
シナリオ本文をMarkdown形式で表します。詳細なルールは後述します。
</text>
</scene>
</scenario>
