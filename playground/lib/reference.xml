<?xml version="1.0" encoding="UTF-8" ?>
<scenario overview="ルート要素">
<outline>
シナリオデータのルート要素です。
</outline>
<title overview="タイトル">
シナリオのタイトルを表します。

プレイ画面の右肩に表示されるので、文字数は10～15文字程度が推奨です。
</title>
<author overview="作者名">
作者名を表します。

投稿時には、ここで指定された名前を掲載します。
</author>

<!--init要素-->
<init overview="初期化情報">
<outline>
シナリオの初期化情報を表します。
</outline>

<basic overview="基本情報">
<outline>
シナリオ全般に関わる基本挙動を表します。
</outline>

<summary overview="パラグラフレス">
true（値は固定）を設定することで、パラグラフ番号レスモードを有効にします。

具体的には、以下のように表示が変化します。

+ scene要素のsummary属性をシーン冒頭に表示
+ シーン冒頭に表示されているシーン番号が非表示
</summary>

<imgset overview="キャラ画像">
キャラの表示画像を変更する場合に、本属性を指定します。 設定値は「custom」で固定です。

> 【Note】
> 将来的には「@～」のような形式で、システム標準の画像セットを指定できるようにする、かもしれません。

本属性を指定した場合には、シナリオルートの配下に/charaフォルダーを作成し、以下の形式で画像を保存してください。

`性別_年齢_種族.png`（たとえばmale_adult_fighter.png）

画像のルールは以下の通りです。

+ サイズは100x100px
+ constraint要素で除外した**以外の**全画像を用意すること（一部だけは不可）
</imgset>

</basic>

<constraint overview="制約情報">
<outline>
シナリオ起動時に生成される種族／性別／年齢を制限したい場合に指定します。

すべてを許容する場合は指定しません。
</outline>

<race overview="種族">
生成する種族を表します。

以下の値をカンマ区切りで列記してください。

+ FIGHTER
+ WIZARD
+ DWARF
+ ELF
</race>

<sex overview="性別">
生成する性別を表します。

以下の値のいずれかを指定してください。複数は列記できません（双方許容する場合は指定しません）。

+ MALE
+ FEMALE
</sex>

<age overview="年齢">
生成する年齢を表します。

以下の値をカンマ区切りで列記してください。

+ YOUNG
+ ADULT
+ OLD
</age>
</constraint>

<bgm overview="既定の楽曲">
<outline>
シナリオで利用する楽曲を指定します。
</outline>

<main overview="メインテーマ" ref="init/bgm/common">
メインテーマを表します（既定はmainです）。
</main>

<happy overview="ハッピーエンド" ref="init/bgm/common">
ハッピーエンドの曲を表します（既定はhappy）。
</happy>

<bad overview="バッドエンド" ref="init/bgm/common">
バッドエンドの曲を表します（既定はbad）。
</bad>

<common>

以下は、値を指定する際の基本ルールです。

+ 拡張子「.mp3」を除いたベース名で指定します（例えば、battle01.mp3ではなく、battle01）。
+ 頭に「@」付きでシステム標準のBGMを意味します。
    + 利用できる.mp3ファイルの名前については、STextページよりUtility 01を確認してください（たとえば@field01、@castle01など）。
    + 特別な標準.mp3として無音を表す「@none」も利用できます。
    + 標準BGMについては、シナリオフォルダーに.mp3ファイルを格納する必要はありません。
+ 頭に「@」のないファイル名は、シナリオフォルダー配下の/bgmフォルダーを見に行きます。対応する.mp3ファイルを準備してください。
</common>
</bgm>

<label overview="ラベル文字列">
<outline>ステータスダイアログで表示されるラベル文字列を表します。</outline>

<status name="hp/mp/state/str/int/dex/krm" overview="HP～KRMラベル">
hp～krmは、対応する項目のラベルに表示すべき文字列を表します。 既定では、それぞれHP、MP、STATE、STR、INT、DEX、KRMです。

表示の都合上、5文字以内を推奨します。また、見た目を考慮するならば、HP～MP、STR～KRMはセットで設定することをお勧めします（一部だけ設定した場合の、見た目の不ぞろいを避けるためです）。
</status>

<free name="free1/free2/free3" overview="FreeNラベル">
free1～3は、対応する項目のラベルに表示すべき文字列を表します。 既定では、それぞれFREE1、FREE2、FREE3です。

表示の都合上、5文字程度を推奨します。また、一部しか利用していない場合には、見た目を考慮して、未使用の項目には「－」などのダミー値を設定することをお勧めします。

本要素を指定した場合、BattleSheet下部の簡易ステータス表示にもFree1～3が追加されます。
</free>
</label>

<intro overview="紹介情報">

<outline>
ゲーム画面のメタ情報、Tweetボタンの紹介文などで利用される情報を定義します。
</outline>

<keywords overview="キーワード">
ゲーム画面でのメタ情報に埋め込まれるキーワードです。

カンマ区切りで1～3単語程度を目安に指定してください。
</keywords>

<description overview="紹介文">
ゲーム画面でのメタ情報、Twitterカード、また、［Tweet］ボタンに反映される紹介文を表します（既定ではSText共通のメッセージが適用されます）。

シーン上で、${tweet}～${/tweet}を指定した場合には上書きされます。
</description>
</intro>
</init>

<!--グループ情報-->
<groups overview="グループ情報">
<outline>
主にPlayground Flowでシーンを束ねるためのグループ群を表します。

配下のgroup要素は複数定義可能です。
</outline>

<group overview="個々のグループ">
<outline>
シーンを束ねるためのグループ定義（シーンの範囲）を表します。グループは、シーンidの範囲で定義するので、関連するシーンは極力、特定のid範囲の中にまとめる（＝なるべく順番に記述する）ことを強くお勧めします。

グループの情報はPlayground Flowでチャートの表示範囲を絞り込むために利用できます。
</outline>

<start overview="開始id">
グループに入れるべきシーンのid値（開始）を表します。
</start>

<end overview="終了id">
グループに入れるべきシーンのid値（終了）を表します。
</end>

<title overview="表示名">
グループの表示名を表します。 識別しやすいよう、10文字前後のわかりやすい名前を付けてください。
</title>

<rule overview="ルールid">
グループに属する戦闘ルールのid値（シーンid）を表します。

本項目が設定されており、かつ、グループに属するシーンで**敵情報（enemies属性）が設定されている場合**、BattleSheetに指定されたシーンのテキストを反映させます。グループ共通の戦闘ルールを指定したい場合に指定します。

#### 補足

BattleSheetに表示する戦闘ルールの優先順位は以下の通りです（以下は優先順位の高い順）。

+ シーン単位の戦闘ルール（＝scene要素のrule属性）
+ グループで設定された戦闘ルール（＝group要素のrule属性）
+ id="99999"のシーン

複数のものが指定されている場合にも優先順位の高いひとつだけが表示されます。
</rule>

</group>
</groups>

<items overview="アイテム情報">
<outline>
シナリオで利用できるアイテム群を表します。

配下のitem要素は複数定義可能です。
</outline>

<item overview="個々のアイテム">
<outline>
個々のアイテム定義を表します。
</outline>

<id overview="アイテムコード">
アイテムコードです（シナリオ内部で一意でなければなりません）。

接頭辞「i」＋「番号」で表します。
</id>

<name overview="名前">
アイテムの名前を表します。
</name>

<target overview="対象パラメーター">
アイテムの作用するパラメーターを表します。本属性を指定した場合、アイテムは「使用可能である」と見なされ、アイテム＆フラグシートから［USE］ボタンで使用できます。

+ hp
+ mp
+ state
+ str
+ int
+ dex
+ krm
+ free1
+ free2
+ free3
+ param
+ none（なにもしない）

none値では自動計算はせずに、アイテムをそのまま消費します（具体的な指示はシナリオ側で記述すべきです）。
</target>

<effect overview="効果値">
アイテムの効果を表します。target属性に応じた影響値（5、1..5、fullなど）を指定してください。

利用可能な設定値は、scene要素の対応する属性を参照してください（たとえばhpであれば、scene要素のhp属性で指定できる値だけが指定できます）。

target="none"の場合、effect属性の値は不要です（無視されます）。
</effect>

<shared overview="共有？">
アイテムを次のシナリオに引き継ぐかどうかを表します（値はtrue固定）。

※scene要素のnexts属性が指定された場合のみ有効です。
</shared>

<text overview="説明文">
アイテムの説明を表します（15文字程度を推奨）。 アイテム＆フラグ画面での表示などに利用されます。

また、「使用可能なアイテム」では使用時にトースト表示のテキストにもなります（よって、使用時の結果を意識したテキストであるべきです）。
</text>
</item>
</items>

<!--フラグ情報-->
<flags overview="フラグ情報">
<outline>
シナリオで利用できるフラグ群を表します。

配下のflag要素は複数定義可能です。
</outline>

<flag overview="個々のフラグ">
<outline>
個々のフラグ定義を表します。
</outline>

<id overview="フラグコード">
フラグコードです（シナリオ内部で一意でなければなりません）。

接頭辞「f」＋「番号」で表します。
</id>

<text overview="説明文">
フラグの表示名を表します。

シナリオの分岐スイッチとしてだけでなく、ステータス画面にあらすじとして表示する用途でも利用します。分岐の不要な箇所でも、物語の要所要所で設定しておくことをお勧めします（文字数は15文字程度を推奨）。

テキスト先頭が「*」で始まる場合には、ステータス画面に表示されない隠しフラグとなります。あとでscene要素のflags属性で削除できるのも、隠しフラグだけです。
</text>
</flag>
</flags>

<!--内部パラメーター情報-->
<params overview="内部パラメーター情報">
<outline>
シナリオで利用できる内部パラメーター群を表します。

配下のparam要素は複数定義可能です。
</outline>
<param overview="個々のパラメーター情報">
<outline>
個々の固有パラメーターを表します。

固有パラメーターは、任意の個数だけ定義できるFree1～3のようなものです。各種サイドバーには表示されないので、内部的な値の管理に利用できます（ただし、${var?～}で本文に表示したり、分岐の条件式などで利用可能）。

数値での利用をメインに想定していますが、文字列の格納も可能です。
</outline>

<id overview="パラメーターコード">
パラメーターコードです（シナリオ内部で一意でなければなりません）。

接頭辞「p」＋「番号」で表します。

ただし、p90～99は予約番号です。現在、予約されているのは以下のものだけですが、将来的にシステムが特定の用途で利用する可能性があるので、シナリオ開発者が自分で採番してはいけません。

+ p99：［戻る］機能の戻り先Scene番号を格納
</id>

<min overview="下限値">
パラメーター値の下限を表します（数値でのみ）。 任意ですが、指定時はmax属性とセットで利用してください。
</min>

<max overview="上限値">
パラメーター値の上限を表します（数値でのみ）。 任意ですが、指定時はmin属性とセットで利用してください。
</max>

<initial overview="初期値">
パラメーター値の初期値を表します（必須）。
</initial>

<text overview="説明文">
パラメーターの説明を表します（15文字程度を推奨）。 ${var?～}式で出力できるので、表示を意識した内容にすべきです。
</text>
</param>
</params>

<!--敵情報-->
<enemies overview="敵情報">
<outline>
シナリオで利用できる敵群を表します。

配下のenemy要素は複数定義可能です。
</outline>

<enemy overview="個々の敵情報">
<outline>
個々の敵／罠定義を表します。
</outline>

<id overview="敵コード">
敵コードです（シナリオ内部で一意でなければなりません）。

接頭辞「m」＋「番号」で表します。
</id>

<name overview="名前">
敵／罠の名前を表します（10文字程度を推奨します）。
</name>

<element overview="属性">
敵／罠の属性を表します。

以下のいずれかを指定してください（無指定の場合は無属性と見なされます）。

+ earth（地）
+ fire（火）
+ water（水）
+ wind（風）
+ spirit（霊）
</element>

<attack overview="攻撃タイプ">
攻撃の種類を表し、どのステータスにダメージを反映するかを決定します（free1～3の意味は、シナリオによって異なります）。

以下のいずれかを指定してください。 いずれの値でもない場合は、（アイコン表示ではなく）文字列がそのまま表示されます。

+ physics（物理）
+ magic（魔法）
+ both（物理／魔法双方）
+ free1（FREE1）
+ free2（FREE2）
+ free3（FREE3）
+ poison（毒）
+ frozen（凍結）
+ stone（石化）
+ curse（呪い）
+ forget（忘却）
+ strN（STR低下）
+ intN（INT低下）
+ dexN（DEX低下）
+ krmN（KRM低下）

strN～krmNのNには1～9の値を設定できます。str2の場合、STRを2低下させます。 ただし、str1はstrとしても同じ意味です。

> 【Note】
> ただし、ゲームバランスの観点からは（数値抜きで）str、int、dex、krmを利用すべきです。Playground FlowでもxxxN値には対応していません。
</attack>

<func overview="ダメージ式">
ダメージ式を表します。

### （1）attack属性がphysics／magic／bothの場合

ダメージ式は「nL+nR+nLM+nRM+nM+n-nSTR-nINT-nDEX-nKRM-nFREE1-nFREE2-nFREE3」で統一。

+ L、LM、M、RM、Rはダイスの値を表します。利用できる記号は、ダイスの個数によって変化します。
    + 2個：L（左）、R（右）
    + 3個：L（左）、M（中央）、R（右）
    + 4個：L（左）、LM（中央左）、RM（中央右）、R（右）
    + 5個：L（左）、LM（中央左）、M（中央）、RM（中央右）、R（右）
+ その他の制約は以下の通りです。
    + nは任意の数値
    + 符号（プラスマイナス）は差し替え可能
    + すべての項は省略可能＆順番も入れ替え可能
    + カッコは利用できない

### （2）attack属性が状態異常、ステータス攻撃の場合

回避条件を「[exp]&gt;[exp]」の形式で指定する（[exp]はダメージ式と同様の形式）。 回避条件を満たさなかった場合にだけ、指定の状態異常が付与されます。

※「[exp]&lt;[exp]」は不可です！！

以下は、その他の注意点です。

+ （1）（2）いずれの場合も、カンマ区切りで複数指定も可能です（その場合はランダムに式を選択します）。
+ ダメージ式／回避条件のステータスへの反映（自動計算）は、func属性の頭に「*」を付与することで無効化できます（自動化ができないシナリオでは「*」を付与してください）。
</func>

<hp overview="生命力">
敵の生命力を表します。 省略可能で、指定した場合にだけBattleSheetに表示されます。

+ 本属性を指定した場合には、func_opp属性も指定してください。
+ 具体的な数値の他、p01、p02...のような内部パラメーターidを指定することも可能です。その場合、シーンを跨って生命力を保持できます。
    + 生命力の初期値もparam要素のinitial属性で指定します。
</hp>

<func_opp overview="ダメージ式（敵）">
プレイヤーから敵を攻撃する際のダメージ式を表します（hp属性が指定されている場合にだけ有効です）。指定可能な式については、func属性の（1）に準じます。
</func_opp>

<drop overview="ドロップアイテム">
ドロップアイテムを表します。以下は設定例です。

+ 「mon/3」で「月×3」（mon、tue、wed、thu、fri、sat、sunを利用可能）
+ 「free1/50/50Gold」で「50Gold」(「free1/50」は「free1を50加算の意）
+ 「item/i01/武器」で「武器」（アイテムi01を入手）
+ 「flag/f01/扉を開く」で「扉を開く」（フラグf01を設定）
+ 「param/p01:10/瓶の中身」で「瓶の中身」（パラメーターp01を10加算。負数ならば減算）
+ 「param/p01:@10/瓶の中身」で「瓶の中身」（パラメーターp01を10に設定）

設定値はカンマ区切りで複数列挙しても構いません。その場合は、ランダムに任意のアイテムが選択されます。

任意の属性で、無指定の場合はelement属性からドロップアイテムを確定します（無属性ではドロップは空）。

</drop>

<text overview="説明文">
敵／罠の説明文です。

プレイ画面で敵リストをクリックした時にトースト表示される文言なので、最大でも50文字程度を推奨します。
</text>
</enemy>
</enemies>

<!--実績情報-->
<results overview="実績情報">
<outline>
シナリオで利用できる実績群を表します。

配下のresult要素は複数定義可能です。
</outline>

<result overview="個々の実績情報">
<outline>
個々の実績情報を表します。
</outline>

<id overview="実績コード">
実績コードです（シナリオ内部で一意でなければなりません）。

接頭辞「r」＋「番号」で表します。
</id>

<name overview="名前">
実績名を表します（ex. ガジガジネズミ）。
</name>

<level overview="難易度">
難易度を表します。指定できるのは1～5の値です。
</level>

<text overview="成立条件">
実績の成立条件を表します（ex. 隧道でネズミに食い殺された）
</text>
</result>
</results>

<!--ライセンス情報-->
<licence overview="ライセンス情報">
<outline>
シナリオで利用している画像／楽曲群を表します。

配下のwork要素は複数定義可能です。
</outline>

<work overview="個々のライセンス情報">
<outline>
シナリオ内部で利用している画像／楽曲のライセンス情報を表します。

シナリオ終了時（ハッピー／バッドエンドを問わない）に、ブラウザーのコンソール画面にリスト表示される情報です。
</outline>

<name overview="名称">
category属性が...

+ bgmの場合は曲名
+ pictureの場合は利用場所（街、酒場など）

を表します。
</name>

<category overview="分類">
作品の分類を表します。以下のいずれかを指定してください。

+ bgm（楽曲）
+ picture（画像）
</category>

<creator overview="作者">
作者／サイト名を表します。
</creator>

<url overview="参照先">
作品の公開サイト（URL）を表します。
</url>
</work>
</licence>

<!--シーン情報-->
<scene overview="シーン情報">
<outline>
各シーンの情報を表します。シナリオ本体です。

複数の列挙が可能です。
</outline>    

<id overview="シーン番号">
シーン番号を数字で表します。idのルールは以下です。

+ シナリオ内部で一意であること
+ id値は0～99999の範囲で採番すること（連番でなくても構わない）
+ 予約番号を一般のSceneに付与してはいけない。

以下は、現在の予約番号です。

+ 0：スタート地点（プロローグであること）
+ 90000；［戻る］機能のリンク先（現在のシーンのひとつ前に戻る）
+ 99998：共通インポート（全シーンの末尾に無条件に反映。ただし、exclude／end属性ありのシーンを除く）
+ 99999：共通ルール（Battle Sheetに既定で反映される）

> 【Note】
> 将来的にid="9XXXX"はなにかしらの予約idになる可能性があります。準予約番号扱いとし、通常のSceneとしては利用しないようにしてください。
</id>

<summary overview="サマリ文">
シーンのサマリ情報を表します（10文字以内を推奨）。

既定では、Playground Flowでシーンを識別するための情報で、プレイ画面には表示はされません。ただし、パラグラフレスモードを有効にすることで、本項目の値がページ上部に表示することもできます。
</summary>

<items overview="取得アイテム">
そのシーンに移動した時に入手できるアイテムを表します。

+ カンマ区切りで複数列挙できます。
+ 「-i～」で、指定のアイテムを喪失します。

#### アイテムの個数管理

+ 「i01:5,...」とすることで、個数付きの指定も可能です（＝i01のアイテムを5個追加）
    + 内部的には個数管理用の内部パラメーター「pi01」が生成されます。
+ 「i01:xxx」のxxxにはparams属性と同じように「@～」（固定値）、「-99」（削減）などの値を指定できます。
+ 個数管理されたアイテムは、個数がゼロになったところで削除されます。
    + 「-i01」のようにしてはいけません。
+ 個数指定可能なアイテムは利用可能（target属性を持つ）でなければなりません。

</items>

<flags overview="取得フラグ">
そのシーンに移動した時に立つフラグを表します。

カンマ区切りで複数列挙できます。「-f～」で、指定のフラグを喪失します（ただし、破棄できるのは隠しフラグだけです）。
</flags>

<params overview="取得パラメーター">
そのシーンに移動した時に加算／減算する内部パラメーターを表します。

+ p01:10 … p01を10加算
+ p01:-10 … p01を10減算
+ p01:@10 … p01を10に設定
+ 「p01:10,p02:Rio」のように、カンマ区切りで複数列挙も可能です。
</params>

<enemies overview="登場する敵">
そのシーンで登場する敵／罠情報を表します。プレイ画面下部に敵リストを生成するのに利用されます。

カンマ区切りで複数列挙できます。
</enemies>

<dice overview="ダイス">
そのシーンのBattle Sheetで利用できるダイスを「種類:個数」の形式で表します。 たとえば「10:5」で、d10ダイスを5個表示します（既定は「6:2」）。

+ 種類は数字、または文字列で表します。
    + 数字：ダイスの上限値（1～20）
    + 文字列：high（4、5、6のみ）、cheat_h（6の出やすい）、cheat_l（1が出やすい）
+ 個数は2～5の間で表します。
</dice>

<stars overview="取得する星">
そのシーンに移動した時に加算／減算する＜七惑星の欠片＞を表します。指定できる形式は、以下の通りです。

+ 月～太陽の順で「9,9,9,9,9,9,9」のカンマ形式（途中省略は不可）
    + 負数指定も可（ただし、減算の結果が負になった場合はゼロ丸めされます。減算の際はシナリオ側で矛盾が生じないようにしてください）
+ 「divN」ですべての星を1/Nにもできる（小数点以下切り捨て）
</stars>

<hp_mp name="hp/mp" overview="HP/MP演算">
そのシーンに移動した時に加算／減算するhp、mp値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」のような定数
+ 「-10..-1」の範囲指定（範囲内で乱数が生成されます）
+ 「full」で上限値がセットされます
+ 「half」で上限値の半分がセットされます

ただし、自動更新によって上限を超えた場合には上限で丸められます。
</hp_mp>

<state overview="状態異常の付与">
そのシーンに移動した時に付与／解除する状態異常を表します。指定できる形式は、以下の通りです。

+ poison（毒）
+ frozen（凍結）
+ stone（石化）
+ curse（呪い）
+ forget（忘却）
+ それぞれに「-」を付与することで解除（例：-poison）
+ 「-all」ですべての状態異常を解除
</state>

<status name="str/int/dex/krm" overview="ステータス演算">
そのシーンに移動した時に加算／減算するstr、int、dex、krm値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」で、指定値だけ増減
+ 「@5」で、指定値を設定
+ 「full」で初期値に戻す（非推奨）
</status>

<free name="free1/free2/free3" overview="FREE演算">
そのシーンに移動した時に加算／減算するfree1～3の値を表します。指定できる形式は、以下の通りです。

+ 「-5」「5」で、指定値だけ増減
+ 「-10..-1」の範囲指定（範囲内で乱数が生成されます）
+ 「@5」で、指定値を設定
</free>

<result overview="取得する実績">
そのシーンに移動した時に取得できる実績を表します。複数指定はできません。
</result>

<bgm overview="楽曲" ref="init/bgm/common">
そのシーンに移動した時に、指定されたBGMに切り替えます。

bgm／end属性が同時に指定された場合は、bgm属性で指定された曲が優先されます。

</bgm>

<se overview="効果音">
そのシーンに移動した時に、指定された効果音を再生します。

「se.mp3」であれば、「se」と指定します。
</se>

<rule overview="戦闘ルール">
Battle Sheetに反映すべきルールテキストを指定します（scene要素のid値で指定してください）。

無指定の場合は、id="99999"のシーンが共通テキストとして引用されます。
</rule>

<end overview="エンディング？">
そのシーンがエンディングシーンであるかを表します。end属性が指定された場合、STextはゲームを終了し、セーブデータを初期化します。

指定できる値は、以下の通りです。

+ happy（ハッピーエンド）
+ bad（バッドエンド）
</end>

<nexts overview="次のシナリオ">
現在のシナリオのセーブデータを、指定のシナリオに引き継ぎます。連作（複数シナリオから構成されるシナリオ）のための機能です。

引き継ぎ先のシナリオコードを「scepter,zero,hero」のようなシナリオコード（カンマ区切り）で指定します。引き継ぐ項目については、以下のセーブデータ詳細を参照してください。

※end属性との組み合わせでのみ有効

> 【Note】
> 引き継ぎに際しては、次シナリオのScene 0の属性指定は無視されます。セーブデータの一部に初期値を与える場合には、Scene 1（次のシーン）などで設定するようにしてください。

### 補足：セーブデータの構造

セーブデータは、個々のシナリオ開始時に生成され、シナリオ固有の情報を管理します。普段意識する必要はありませんが、情報を管理する際に知っておくと、STextの挙動をイメージしやすくなるでしょう。

+ 基本ステータスは種族／性別で決定されます（別表の基準値をもとにランダム決定）
+ ストレージに保存する際のキーは「シナリオコード」です。

以下はセーブデータの構造です（★はnexts属性でのコピー時に引き継がれ**ない**項目です。ただし、itemsは「item要素でshared属性が指定されているアイテムのみ」引き継がれます）。

```
├──chara …………………… キャラ情報
│　　├──title …………… 称号
│　　├──name  …………… 名前
│　　├──race  …………… 種族
│　　├──sex ……………… 性別
│　　├──age ……………… 年齢帯（YOUNG／ADULT／OLD）
│　　├──job ……………… 職業
│　　├──state …………… 状態異常
│　　├──stone_scene …… 石化の経過シーン数
│　　├──forget_scene  … 忘却の経過シーン数
│　　├──hp_m  …………… HP上限
│　　├──hp  ……………… HP現在値 
│　　├──mp_m  …………… MP上限
│　　├──mp  ……………… MP現在値
│　　├──str_i …………… 強さ初期値（0～10）未使用
│　　├──str ……………… 強さ現在値（0～10）
│　　├──int_i …………… 賢さ初期値（0～10）未使用
│　　├──int ……………… 賢さ現在値（0～10）
│　　├──dex_i …………… 器用さ初期値（0～10）未使用
│　　├──dex ……………… 器用さ現在値（0～10）
│　　├──krm_i …………… 魅力初期値（0～10）未使用
│　　├──krm ……………… 魅力現在値（0～10）
│　　├──free1 …………… 自由ステータス1
│　　├──free2 …………… 自由ステータス2
│　　└──free3 …………… 自由ステータス3
├──stars …………………… 所持している七惑星の欠片（月～太陽の個数を配列で）
├──items …………………… 所持しているアイテム（配列）★
├──flags …………………… 所持しているフラグ（配列）★
├──params…………………… 所持している内部パラメーター（配列）★
├──memos …………………… 冒険メモ（自由入力欄）
├──scene …………………… 現在のシーン★
├──ellapsed_scene  ……… 経過したシーン数★
├──bgm ……………………… 現在再生中のBGM（空文字列はメインテーマ）★
├──bonus …………………… 現在のシナリオで適用されるボーナス
└──isEnded ………………… エンディングに到達しているか★
```

### 補足2：グローバルセーブデータ

シナリオ個々の情報を管理するセーブデータとは別に、ゲーム全体の情報を管理する**グローバルセーブルデータ**もあります。グローバルセーブデータに対して、上のセーブデータを**ローカルセーブデータ**とも言います。

+ 初回のシナリオ生成時に生成され、複数のシナリオ間で共有されます。
+ キーは固定で「sorcerian_text」

以下はセーブデータの構造です。

```
├──items ………… シナリオ終了時に得られるアイテム（シナリオ共通で累積される）
├──results ……… 実績情報（「シナリオid: 実績リスト」の形式）
├──panel ………… コントロールパネルは表示状態か
└──bgm …………… BGMを再生するか
```

</nexts>

<exclude overview="インポート除外">
true（固定値）で、共通インポートを無効化します。 共通インポートについては、scene－id属性を参照してください。
</exclude>

<fixed overview="シャッフル除外">
チェック時には、シーンidのシャッフル時に、シャッフルから除外します。

シーンidがなんらかの意味を持っており、シャッフル時に勝手に変更されなくない場合に利用します。
</fixed>

<color overview="背景色">
Playground Flowのチャート図で利用するシーンカラーを表します。
</color>

<text overview="シナリオ本文">
シナリオ本文はMarkdown形式で表します。

Markdown形式は、ブログなどに利用される簡易なテキストフォーマットです。簡単な文字修飾をはじめ、画像の埋め込みや表組み、リンク、箇条書きリストなどを表現できます。

|構文|機能|
|----|----|
|# ...|見出し（#の数が階層レベル）|
|空行|段落|
|\*\*...\*\*|太字|
|\*...\*|斜体|
|+ ...|箇条書きリスト|
|1. ...|番号付きリスト|
|!\[代替テキスト](ファイル名)|画像の挿入|
|> ...|引用|
|====|水平線|


> 【Note】
> 画像ファイルの名前は、アルファベット小文字＋数字で統一してください（「_」などの記号は利用できません）。

本ドキュメントではMarkdownの詳細については割愛します。より詳細は、以下のようなページも参考にしてください。

https://notepm.jp/help/how-to-markdown

基本的な構文には対応しているはずですが、リンクとテキストのカラーリングだけは例外です。リンクは「http://～」「https://～」で始まるテキストが自動リンクされます。カラーリングについては、以下のSGML式を利用してください。

### SGML式

SGMLでは、Markdownを拡張して、テキストのカラーリングや式の埋め込みにも対応しています。

#### 式埋め込み

${...}の形式で、テキストの任意の箇所に式の埋め込みが可能です。利用可能な式は、以下の通りです。

+ ${title}	… キャラの称号
+ ${name}	… キャラの名前
+ ${job}	… キャラの職業
+ ${xxxxx}	… キャラのステータス（xxxxxはhp、mp、str、int、dex、krm、free1～3のずれか）
+ ${race?人間:魔法使い:ドワーフ:エルフ}	… 種族に応じて単語を置き換え
+ ${sex?男:女}	… 性別に応じて単語を置き換え
+ ${state?正常:毒:凍結:石化:忘却}	… 状態異常に応じて単語を置き換え
+ ${age?若者:中年:老人}	… 年齢帯に応じて単語を置き換え
+ ${rand?1:20}	… 指定の値範囲で乱数を生成
+ ${msg?こんにちは:おはよう:こんばんは}	… 指定のメッセージをランダムに選択
+ ${var?i01:～}	… アイテム情報を表示
	+ ${var?i01:name}	… アイテムの名前
	+ ${var?i01:text}	… アイテムの説明
+ ${var?m01:～}	… 敵／罠情報を表示
	+ ${var?m01:name}	… 敵の名前
	+ ${var?m01:element}	… 敵の属性
	+ ${var?m01:text}	… 敵の説明
+ ${var?r01:～}	… 実績情報を表示
	+ ${var?r01:name}	… 実績名
	+ ${var?r01:level}	… 実績のレベル
	+ ${var?r01:text}	… 実績の説明
+ ${var?p01:～}	… 内部パラメーター情報を表示
	+ ${var?p01:text}	… パラメーターの説明
	+ ${var?p01:value}	… パラメーターの現在値
+ ${result?id}：シナリオidの実績数を取得
+ ${result_rate?id}：シナリオidの実績率を取得

**備考**

+ race、sex、state、age、msgなどでは、「?」以降は、「:」区切りで表示すべき任意の単語を指定できます。
+ ${result?id}、${result_rate?id}は、現在の実装の制約で、起動時の最初のページでは実績情報を取得できません（Scene 0というわけではありません）。取得失敗時は「?????」を表示します。

#### 共通テキストの埋め込み

${import id値}の形式で、scene要素で指定されたテキストを埋め込むことができます。テキスト内には、任意の埋め込み式も指定可能ですが、${import}を入れ子で利用することはできません。

```
${import 99991}
```

#### フォーム要素の埋め込み

${...}の形式で、本文中にテキストボックスなどのフォーム要素を埋め込むことが可能です。

+ ${input?0}

［＋］［－］ボタン付きの数値入力ボックス。引数は初期値。
セーブデータなどには反映されないので、シーン内でのメモ用途です。

> 【Note】
> 現時点では、数値ボックスのみの対応ですが、将来的にボタン、チェックボックスなどを追加の予定です。

#### 条件分岐

${if xxx}～${/if}の形式で、テキスト内に条件付きで表示するテキストを指定できます。xxxには移動ボタンで利用可能なすべての条件式を利用できます（複合条件式にも対応）。

```
${if f04}
フラグ04が立っている時にだけ表示されます。
${/if}
```

#### エフェクト再生［β版］

${effect xxxxx}～${/effect}で、配下のテキストに対して、エフェクト（アニメーション）を適用できます。xxxxxに指定できる値には、以下のようなものがあります。

+ flash
+ bounce
+ shake
+ tada
+ swing
+ wobble
+ pulse
+ flip／flipInX／flipInY
+ fadeIn／fadeInUp／fadeInDown／fadeInLeft／fadeInRight
+ fadeInUpBig／fadeInDownBig／fadeInLeftBig／fadeInRightBig
+ bounceIn／bounceInDown／bounceInUp／bounceInLeft／bounceInRight
+ rotateIn／rotateInDownLeft／rotateInDownRight／rotateInUpLeft／rotateInUpRight
+ rollIn

${effect}は段落単位に指定してください（段落を跨ぐ場合には、その個数だけ指定すること）。

#### ルビ指定

${元の文字列|ルビ}の形式で、ルビの指定も可能です。

```
俺は${銀狼|silver wolf}だ！
```

#### テキストのカラーリング

%blue%～%/%でテキストを囲むことで、任意のテキストにカラーリングも可能です。

```
みんな、%blue%ソーサリアン%/%だ！
```

ただし、現時点では以下の制約があります。

+ 現在利用できるカラーは、blue、red、purple、whiteのみです（whiteはテキスト選択でのみ反転表示される非表示テキストの用途が目的）。
+ カラーリングしたテキストの前後には、半角スペースが入ります。

#### ツイートボタンへの反映

${tweet}～${/tweet}で、任意のテキストを括ることで、その内容を［ツイート］ボタンに反映できます。以下は制約事項です。

+ ${tweet}配下では、Markdownによる修飾はできません。
+ ${tweet}はひとつのシーンでひとつしか利用できません（複数は上書き）。
+ 指定されていないシーンでは、init－intro要素での設定値が利用されます。
+ 指定したシーンでは、intro要素での設定値は上書きされます。

</text>

<edge overview="リンク式" ref="scene/edge_common">
※本項はscene要素本文で利用できる移動ボタンに関するドキュメントです（edge属性があるわけではありません）。

scene要素の本文では、以下のような拡張構文で移動ボタンを作成できます。

```
[ボタンキャプション](リンク先番号)
```
　▼
```
[冒険に出発する](1)
```

### 条件式付きの移動ボタン

更に、フラグ／アイテムなどの条件に応じて、移動ボタンの表示／非表示を制御できます。

```
[ボタンキャプション](リンク先番号 "条件式")
```
　▼
```
[冒険に出発する](1 "f01")
```

条件式には、以下のような構文を利用できます。

</edge>

<edge_flow ref="scene/edge_common">
リンクに条件式を指定することで、「特定の条件を満たした場合にだけ表示される」リンクを生成できます。

条件式に利用できる構文には、以下のようなものがあります。

</edge_flow>

<edge_common>

#### フラグがある／ない場合のみ表示

|構文|意味|例|
|-----|---|---|
|フラグコード|フラグf01がある場合|f01|
|!フラグコード|フラグf01がない場合|!f01|

#### アイテムを持っている／いない場合のみ表示

|構文|意味|例|
|-----|---|---|
|アイテムコード|アイテムi01を持っている場合|i01|
|!アイテムコード|アイテムi01を持っていない場合|!i01|

#### 内部パラメーターの値が条件に合致する場合のみ表示

|構文|意味|例|
|-----|---|---|
|パラメーターコード:値|p01が10以上の場合|p01:10|
|!パラメーターコード:値|p01が10未満の場合|!p01:10|
|パラメーターコード:@値|p01が10の場合|p01:@10|
|!パラメーターコード:@値|p01が10でない場合|!p01:@10|

比較する値が文字列の場合は常に等価比較となるので、先頭の「@」は不要です。

#### 魔法を利用できる／できない場合のみ表示

|構文|意味|例|
|-----|---|---|
|m魔法名|魔法が利用できる場合|mHEAL|
|!m魔法名|魔法が利用できない場合|!mHEAL|

魔法ボタンでの移動時には、自動的に対応する星が減算されます。

#### ステータスが指定値を上回っている／下回っている場合のみ表示

|構文|意味|例|
|-----|---|---|
|o［ステータス種別］［値］+|ステータスが値より大きい|oHP50+|
|o［ステータス種別］［値］-|ステータスが値より小さい|oHP50-|
|!［ステータス種別］［値］+|ステータスが値以下|!oHP50+|
|!［ステータス種別］［値］-|ステータスが値以上|!oHP50-|

ステータス種別にはSTR、INT、DEX、KRM、HP、MP、FreeI、FreeII、FreeIIIを指定可能です。

#### キャラの基本情報が合致している／していない場合のみ表示

|構文|意味|例|
|-----|---|---|
|x情報|指定された情報に合致する場合|xFIGHTER|
|!x情報|指定された情報に合致しない場合|!xのうふ|

情報には、以下のものを指定可能です。

+ 種族（FIGHTER／WIZARD／DWARF／ELF）
+ 性別（MALE／FEMALE）
+ 年齢帯（YOUNG／ADULT／OLD）
+ 状態異常（POINSON／FROZEN／STONE／CURSE／FORGET）
+ 職業（のうふ／こじきなど。ひらがな／カタカナ表記）

#### 個々の星を指定数以上、所持している／いない場合のみ表示

|構文|意味|例|
|-----|---|---|
|s月:...:太陽|星の数が各々指定数以上|s7:7:7:7:7:7:7|
|!s月:...:太陽|星の数のどれかが指定数未満|s7:7:7:7:7:7:7|

#### 星の所持総数が指定数以上である／ない場合のみ表示

|構文|意味|例|
|-----|---|---|
|s総数|星の総数が指定数以上の場合|s49|
|!s総数|星の総数が指定数未満の場合|!s49|

#### 実績がある／ない場合のみ表示

|構文|意味|例|
|-----|---|---|
|実績コード:シナリオコード|指定シナの実績コードを持つ場合|r01:scepter|
|!実績コード:シナリオコード|指定シナの実績コードを持たない場合|!r01:scepter|


実績は恒久的に維持されます（冒険開始時などにクリアされません）。

よって、実績を一度取得した場合、ストレージをクリアなどしない限り、「実績取得していない場合のリンク」は永久に見られなくなります。

#### 経過シーン数が一定値を越えている／いない場合のみ表示

|構文|意味|例|
|-----|---|---|
|e経過シーン数|経過シーン数が指定値を超えた場合|e15|
|!e経過シーン数|経過シーン数が指定値を超えていない場合|!e15|

#### 複合条件式

前出の条件を複合的に組み合わせ可能です。
組み合わせに際しては、以下の演算子を利用できます。

+ !（否定）
+ &amp;（かつ）
+ |（または）

演算子の優先順位は「!」＞「&amp;」＞「|」ですが、カッコで括った場合には、そこが最優先となります。

|例|意味|
|-----|---|
|!f03|f03を所持しない|
|f01&amp;f02&amp;i01|f01、f02、i01が全て揃っている|
|f01\|f02\|i01|f01、f02、i01のどれかを所持|
|!(f01&amp;f02&amp;i01)|f01、f02、i01のどれかを所持していない|
|f01&amp;(f02\|i01)|f02、i01いずれかを所持、かつ、f01を所持|
|f01&amp;!f02&amp;i01|f01、i01を所持しており、かつ、f02を所持しない|

なお、複合条件式を利用する際には、scene要素の配下全体を&lt;![CDATA[～]]&gt;で括ってください（この記述はPlayground Flowでは不要です）。

```
&lt;scene id="2"&gt;
&lt;![CDATA[
...本文...
]]&gt;
&lt;/scene&gt;
```
#### 関数式による特殊な条件［α版］

fn:関数名(引数,...)の形式で特殊な条件式を表現できます。
利用できる関数には、以下のようなものがあります。

+ fn:rand(40)：40％の確率で表示するリンク
+ fn:include(2,f1,f2,f3)：f1～3の中で2個以上存在すればtrue（i1、i2...も指定可）
+ fn:range(str,5,10)：STRの値が5以上10未満の場合にtrue（指定可能なキーは以下）
    + ステータス（hp、mp、str～krm、free1～3）
    + 内部パラメーター（p01...）
    + 経過シーン数（e）
+ fn:cycle(15,5,3)：1～5、6～10、11～15...（1周15までを3等分）としたときの1番目のグループ1～5、16～20...の範囲に経過シーン数が含まれる場合にtrue

### 特殊なリンク

その他にも特殊なリンク表現があります。

> 【Note】
> 特殊リンクは、PgFlowでは自動的に生成されるので、構文を意識する必要はほとんどありません。ただし、どのようなリンクが生成されるかを把握していると、PgFlowの理解も深まるはずです。

#### シーン番号を入力しての移動を可能にする場合

以下のように、リンク先をX、キャプションに移動可能なシーン番号をカンマ区切りで列挙したリンクを用意します（任意移動リンクはシーンにひとつしか設置できません）。

```
[10,11,12](X)
```

#### 入力文字列を判定して正否によって分岐

以下のように、リンク先をQ、キャプションを「正答,正しい時の移動先,間違った場合の移動先」としたリンクを用意します（文字列入力リンクはシーンにひとつしか設置できません）。

```
[グーラン,11,12](Q)
```

上の例では、「グーラン」と入力した場合には11へ、さもなければ12へ移動します。

#### ランダムな移動を可能にする場合

以下のようにリンク先番号をカンマ区切りで列挙することもできます。この場合、リンク先はその時どきにランダムで決まります。

```
[ランダムリンク](1,2,3)
[ランダムリンク](1,2,3;2)
```

末尾に「;2」のような形式で日数を記述することで、キャッシュ機能を有効にできます。「;2」であれば、2日間、初回のリンク先が変化しません。


> 【Note】
> キャッシュ機能はCookiesを利用して実装されています。キャッシュを手動で破棄するには、開発者ツールから「stext_cache_～」という名前のCookiesを削除します。

</edge_common>
</scene>
</scenario>
